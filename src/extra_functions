

//void
//boundingBox(PointCloud<PointXYZRGB>::Ptr cloud){

//  pcl::MomentOfInertiaEstimation <pcl::PointXYZRGB> feature_extractor;
//  feature_extractor.setInputCloud (cloud);
//  feature_extractor.compute ();

//  std::vector <float> moment_of_inertia;
//  std::vector <float> eccentricity;
//  pcl::PointXYZRGB min_point_AABB;
//  pcl::PointXYZRGB max_point_AABB;
//  pcl::PointXYZRGB min_point_OBB;
//  pcl::PointXYZRGB max_point_OBB;
//  pcl::PointXYZRGB position_OBB;
//  Eigen::Matrix3f rotational_matrix_OBB;
//  float major_value, middle_value, minor_value;
//  Eigen::Vector3f major_vector, middle_vector, minor_vector;
//  Eigen::Vector3f mass_center;

//  feature_extractor.getMomentOfInertia (moment_of_inertia);
//  feature_extractor.getEccentricity (eccentricity);
//  feature_extractor.getAABB (min_point_AABB, max_point_AABB);
//  feature_extractor.getOBB (min_point_OBB, max_point_OBB, position_OBB, rotational_matrix_OBB);
//  feature_extractor.getEigenValues (major_value, middle_value, minor_value);
//  feature_extractor.getEigenVectors (major_vector, middle_vector, minor_vector);
//  feature_extractor.getMassCenter (mass_center);

//  boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer (new pcl::visualization::PCLVisualizer ("3D Viewer"));
//  viewer->setBackgroundColor (0, 0, 0);
//  viewer->addCoordinateSystem (1.0);
//  viewer->initCameraParameters ();
//  viewer->addPointCloud<pcl::PointXYZRGB> (cloud, "sample cloud");
//  viewer->addCube (min_point_AABB.x, max_point_AABB.x, min_point_AABB.y, max_point_AABB.y, min_point_AABB.z, max_point_AABB.z, 1.0, 1.0, 0.0, "AABB");

//  Eigen::Vector3f position (position_OBB.x, position_OBB.y, position_OBB.z);
//  Eigen::Quaternionf quat (rotational_matrix_OBB);
//  viewer->addCube (position, quat, max_point_OBB.x - min_point_OBB.x, max_point_OBB.y - min_point_OBB.y, max_point_OBB.z - min_point_OBB.z, "OBB");

//  pcl::PointXYZRGB center (mass_center (0), mass_center (1), mass_center (2));
//  pcl::PointXYZRGB x_axis (major_vector (0) + mass_center (0), major_vector (1) + mass_center (1), major_vector (2) + mass_center (2));
//  pcl::PointXYZRGB y_axis (middle_vector (0) + mass_center (0), middle_vector (1) + mass_center (1), middle_vector (2) + mass_center (2));
//  pcl::PointXYZRGB z_axis (minor_vector (0) + mass_center (0), minor_vector (1) + mass_center (1), minor_vector (2) + mass_center (2));
//  viewer->addLine (center, x_axis, 1.0f, 0.0f, 0.0f, "major eigen vector");
//  viewer->addLine (center, y_axis, 0.0f, 1.0f, 0.0f, "middle eigen vector");
//  viewer->addLine (center, z_axis, 0.0f, 0.0f, 1.0f, "minor eigen vector");

//  while(!viewer->wasStopped())
//  {
//    viewer->spinOnce (100);
//    boost::this_thread::sleep (boost::posix_time::microseconds (100000));
//  }

//}







PointCloud<PointXYZRGB>::Ptr
BoundryDetection(PointCloud<PointXYZRGB>::Ptr cloud, int decide){

    /*http://pointclouds.org/documentation/tutorials/hull_2d.php*/

    HullConst HC;

    PointCloud<PointXYZRGB>::Ptr plane(new PointCloud<PointXYZRGB>);
    PointCloud<PointXYZRGB>::Ptr cloudHull(new PointCloud<PointXYZRGB>);

    // Get the plane model, if present.
    ModelCoefficients::Ptr coefficients(new ModelCoefficients);
    SACSegmentation<PointXYZRGB> segmentation;
    segmentation.setInputCloud(cloud);
    segmentation.setModelType(SACMODEL_PLANE);
    segmentation.setMethodType(SAC_RANSAC);
    segmentation.setDistanceThreshold(0.01);
    segmentation.setOptimizeCoefficients(true);
    PointIndices::Ptr inlierIndices(new PointIndices);
    segmentation.segment(*inlierIndices, *coefficients);



    if (decide == 1){
        //CONCAVE HULL
        // Copy the points of the plane to a new cloud.
        ExtractIndices<PointXYZRGB> extract;
        extract.setInputCloud(cloud);
        extract.setIndices(inlierIndices);
        extract.filter(*plane);

        // Object for retrieving the concave hull.
        ConcaveHull<PointXYZRGB> hull;
        hull.setInputCloud(plane);
        hull.setKeepInformation(HC.KeepInfo);
        // Set alpha, which is the maximum length from a vertex to the center of the voronoi cell
        // (the smaller, the greater the resolution of the hull).
        hull.setDimension(HC.setDimConcave);

        hull.setAlpha(HC.Alpha);   //--->0.1
        hull.reconstruct(*cloudHull);

        return cloudHull;
    }

    if(decide == 2){

        //CONVEX HULL


        ExtractIndices<PointXYZRGB> extract;
        extract.setInputCloud(cloud);
        extract.setIndices(inlierIndices);
        extract.filter(*plane);


        ConvexHull<PointXYZRGB> hull;
        hull.setInputCloud(plane);
        hull.setDimension(HC.setDimConvex);
        hull.reconstruct(*cloudHull);
        return cloudHull;

    }
}

